---
import { SEO } from 'astro-seo';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/global.css';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const {
  title = 'Ankit Raj | Full Stack Developer',
  description = 'Portfolio of Ankit Raj, a passionate full stack developer specializing in web development.',
  image = '/images/profile-meta.jpg',
} = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Fira+Code:wght@400;500&display=swap" rel="stylesheet" />
    
    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title,
          type: 'website',
          image,
        },
        image: {
          alt: 'Ankit Raj Portfolio Preview',
        },
      }}
      twitter={{
        creator: '@ankitraj',
      }}
    />
    
    <script is:inline>
      // Check for dark mode preference
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
  </head>
  
  <body class="bg-white dark:bg-dark-900 text-dark-900 dark:text-white min-h-screen flex flex-col">
    <Header />
    <main class="flex-grow">
      <slot />
    </main>
    <Footer />
    
    <script>
      import { animate, scroll, inView } from 'motion';
      
      // Animate elements when they come into view
      inView('.animate-on-scroll', ({ target }) => {
        animate(
          target,
          { opacity: 1, y: 0 },
          { duration: 0.5, delay: 0.2 }
        );
      });
      
      // Parallax effect for hero section
      const heroSection = document.querySelector('.hero-section');
      const parallaxElement = document.querySelector('.parallax');
      
      if (heroSection && parallaxElement) {
        scroll(
          animate(parallaxElement, { y: [0, 100] }),
          { target: heroSection, offset: ['start', 'end'] }
        );
      }
    </script>
  </body>
</html>